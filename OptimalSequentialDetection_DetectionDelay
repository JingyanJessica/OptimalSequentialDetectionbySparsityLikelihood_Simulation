##Simulation of XS
library(readxl)
library(InspectChangepoint)
library(hdbinseg)
library(xtable)
library(iterators)
library(foreach)
library(parallel)
library(doParallel)

R = 500
K = 200
b = 53.5
N = 100
p0 = 1
#p0 = N^(-0.5)
N_col = 200
NN = 1
EDD = numeric(R)

cumsum1 = function(x, K1){
  res = c()
  for (k in 1:length(K1)){
    res = append(res, sum(x[1:K1[k]]))
  }
  res
}

XS.thr.1 = function(Data,N_col,N,p0,K,b){
  Z = Data[,1]
  Z[Z<0] = 0
  g = log(1-p0+p0*(exp(Z^(2)/2)))
  if (sum(g)>=b) {
    res = 1
  }else {
    ps = 0
    t = 2
    while ((t<=N_col) & (max(ps)<b)){
      # exponential grid
      K1 = c(1:27,40, 60, 89, 134, 200)
      K1 = K1[K1<=t]
      y = matrix(Data[,(t-max(K1)+1):t],nrow = N)
      cusum = t(apply(y,1,function(x) rev(cumsum1(rev(x), K1))))
      k = t(matrix(rep(rev(K1),N),ncol = N)
      Z = cusum/sqrt(k)
      Z[Z<0] = 0      
      g = log(1-p0+p0*(exp(Z^(2)/2)))
      ps=apply(g,2,sum)
      t = t+1 
    }
    res = t-1
  }
  res
}

Simu_XS <- foreach(i=1:R) %dopar% {
  set.seed(i)
  seq=matrix(rnorm(N*K),nrow=N)
  mumat=matrix(nrow=N,ncol=K,data=0)
  m = sample(1:N,NN)
  for (j in 1:NN){
    mumat[m[j],1:K] = sqrt(NN)/sqrt(j*sum(1/(1:NN)))
  }
  seq1=seq+mumat
  XS.thr.1(Data=seq1,N_col=N_col,N=N,p0=p0,K=K,b=b)
}

for (j in 1:R){
  EDD[j] <- Simu_XS[[j]]
}
mean(EDD)

##Simulation of Mei without p0
R = 500
K = 200
b = 88.5
N = 100
delta0 = 1
N_col = 200
NN = 1
EDD = numeric(R)

cumsum1 = function(x, K1){
  res = c()
  for (k in 1:length(K1)){
    res = append(res, sum(x[1:K1[k]]))
  }
  res
}

Mei1.thr.2 = function(Data,N_col,N,delta0,b){
  Z = Data[,1]
  g = max(delta0*Z-delta0^(2)/2)
  g[g<0] = 0
  if (sum(g)>=b) {
    res = 1
  }else {
    ps = 0
    t = 2
    while ((t<=N_col) & (sum(ps)<b)){
      # Exponential grid: 
      K1 = c(1:27,40, 60, 89, 134, 200)
      K1 = K1[K1<=t]
      y = matrix(Data[,(t-max(K1)+1):t],nrow = N)
      cusum = t(apply(y,1,function(x) rev(cumsum1(rev(x), K1))))
      k = t(matrix(rep(rev(K1),N),ncol = N))
      Z = delta0*cusum - k*delta0^(2)/2
      Z[Z<0] = 0
      ps=apply(Z,1,max)
      t = t+1 
    }
    res = t-1
  }
  res
}

Simu_Mei1 <- foreach(i=1:R) %dopar% {
  set.seed(i)
  seq=matrix(rnorm(N*K),nrow=N)
  mumat=matrix(nrow=N,ncol=K,data=0)
  m = sample(1:N,NN)
  for (j in 1:NN){
    mumat[m[j],1:K] = sqrt(NN)/sqrt(j*sum(1/(1:NN)))
  }
  seq1=seq+mumat
  Mei1.thr.2(Data=seq1,N=N,N_col=N_col,delta0=delta0,b=b)
}

for (j in 1:R){
  EDD[j] <- Simu_Mei1[[j]]
}
mean(EDD)

##Simulation of Mei with p0
R = 500
K = 200
b = 3.46
N = 100
delta0 = 1
lam = 0.64
p0 = N^(-0.5)
#p0 = 3*N^(-0.5)
N_col = 200
NN = 1
EDD = numeric(R)

Mei.thr.2 = function(Data,N_col,N,lam,p0,b){
  Z = Data[,1]
  g = log(1+p0*(lam*exp(Z/2)-1))
  if (sum(g)>=b) {
    res = 1
  }else {
    ps = 0
    t = 2
    while ((t<=N_col) & (ps<b)){
      Z = Data[,t]
      g = log(1+p0*(lam*exp(Z/2)-1))
      ps = sum(g)
      t = t+1 
    }
    res = t-1
  }
  res
}

Simu_Mei <- foreach(i=1:R) %dopar% {
  set.seed(i)
  seq=matrix(rnorm(N*K),nrow=N)
  mumat=matrix(nrow=N,ncol=K,data=0)
  m = sample(1:N,NN)
  for (j in 1:NN){
    mumat[m[j],1:K] = sqrt(NN)/sqrt(j*sum(1/(1:NN)))
  }
  seq1=seq+mumat
  seq2 = matrix(0, ncol = N_col, nrow = N)
  seq2[,1] = pmax(seq1[,1]*delta0 - delta0^(2)/2, 0)
  for (t in 2:K){
    seq2[,t] = pmax(seq2[,(t-1)] + seq1[,t]*delta0 - delta0^(2)/2, 0)
  }
  Mei.thr.2(Data=seq2,N=N,N_col=N_col,lam=lam,p0=p0,b=b)
}

for (j in 1:R){
  EDD[j] <- Simu_Mei[[j]]
}
mean(EDD)

##Simulation of Chan
R = 500
lam = 2*(sqrt(2)-1)
K = 200
b = 4.25
N = 100
p0 = N^(-0.5)
#p0 = 3*N^(-0.5)
N_col = 200
NN = 1
EDD = numeric(R)

cumsum1 = function(x, K1){
  res = c()
  for (k in 1:length(K1)){
    res = append(res, sum(x[1:K1[k]]))
  }
  res
}

TS.thr.2 = function(Data,N_col,N,p0,lam,K,b){
  Z = Data[,1]
  Z[Z<0] = 0
  g = log(1+p0*(lam*exp(Z^(2)/4)-1))
  if (sum(g)>=b) {
    res = 1
  }else {
    ps = 0
    t = 2
    while ((t<=N_col) & (max(ps)<b)){
      # exponential grid
      K1 = c(1:27,40, 60, 89, 134, 200)
      K1 = K1[K1<=t]
      y = matrix(Data[,(t-max(K1)+1):t],nrow = N)
      cusum = t(apply(y,1,function(x) rev(cumsum1(rev(x), K1))))
      k = t(matrix(rep(rev(K1),N),ncol = N))
      Z = cusum/sqrt(k)
      Z[Z<0] = 0
      
      g = log(1+p0*(lam*exp(Z^(2)/4)-1))
      ps=apply(g,2,sum)
      t = t+1 
    }
    res = t-1
  }
  res
}

Simu_TS <- foreach(i=1:R) %dopar% {
  set.seed(i)
  seq=matrix(rnorm(N*K),nrow=N)
  mumat=matrix(nrow=N,ncol=K,data=0)
  m = sample(1:N,NN)
  for (j in 1:NN){
    mumat[m[j],1:K] = sqrt(NN)/sqrt(j*sum(1/(1:NN)))
  }
  seq1=seq+mumat
  TS.thr.2(Data=seq1,N_col=N_col,N=N,p0=p0,lam=lam,K=K,b=b)
}

for (j in 1:R){
  EDD[j] <- Simu_TS[[j]]
}
mean(EDD)

##Simulation of OCD
R = 500
EDD = numeric(R)
NN = 1
N = 100
thresh <- setNames(c(13.60018,1290.80185,76.98286), c('diag', 'off_d', 'off_s'))

Simu_ocd <- foreach(i=1:R) %dopar% {
  library(ocd)
  set.seed(i)
  m <- sample(1:N, NN)
  detector <- ChangepointDetector(dim=N, method='ocd',thresh=thresh, beta=1)
  mumat <- rep(0, N)
  for (j in 1:NN){
    mumat[m[j]] = sqrt(NN)/sqrt(j*sum(1/(1:NN)))
  }
  new_mean <- mumat
  detector <- setStatus(detector, 'monitoring')
  for (t in 1:K){
    x_new <- rnorm(N, new_mean)
    detector <- getData(detector, x_new)
  }
  status(detector)
}

for (j in 1:R){
  EDD[j] <- Simu_ocd[[j]]
}
mean(EDD)

## Simulation of Sparsity likelihood
R = 500
gam = 5000
lam1 = 1
lam2 = sqrt(log(gam)/log(log(gam)))
b = 7.16
K = 200
N = 100
NN = 1
EDD = numeric(R)

cumsum1 = function(x, K1){
  res = c()
  for (k in 1:length(K1)){
    res = append(res, sum(x[1:K1[k]]))
  }
  res
}

SL.det.nor2 = function(Data,N_col,N,lam1,lam2,K,b,gam){
  Z = Data[,1]
  Z[Z<0] = 0
  logpval=pnorm(-Z,log.p=TRUE)
  f=log(1+(lam1*log(N)/N)*(1/(exp(logpval)*(2-logpval)^2)-0.5)+(lam2/sqrt(N*log(N)))*(1/sqrt(exp(logpval))-2))
  ps=sum(f)
  if (ps>=b) {
    res = 1
  }else {
    ps = -10000
    t = 2
    while ((t<=N_col) & (max(ps)<b)){
      # exponential grid
      K1 = c(1:27, 35, 47, 63, 84, 113, 150,200)
      K1 = K1[K1<=t]
      y = matrix(Data[,(t-max(K1)+1):t],nrow = N)
      cusum = t(apply(y,1,function(x) rev(cumsum1(rev(x), K1))))
      k = t(matrix(rep(rev(K1),N),ncol = N))
      Z = cusum/sqrt(k)
      Z[Z<0] = 0
      
      logpval=pnorm(-Z,log.p=TRUE)
      f=log(1+(lam1*log(N)/N)*(1/(exp(logpval)*(2-logpval)^2)-0.5)+(lam2/sqrt(N*log(N)))*(1/sqrt(exp(logpval))-2))
      ps=apply(f,2,sum)
      t = t+1 
    }
    res=t-1
  }
  res
}

Simu_SL <- foreach(i=1:R) %dopar% {
  set.seed(i)
  seq=matrix(rnorm(N*K),nrow=N)
  mumat=matrix(nrow=N,ncol=K,data=0)
  m = sample(1:N,NN)
  for (j in 1:NN){
    mumat[m[j],1:K] = sqrt(NN)/sqrt(j*sum(1/(1:NN)))
  }
  seq1=seq+mumat
  SL.det.nor2(Data=seq1,N_col=N_col, N=N,lam1=lam1,lam2=lam2,K=K,b=b,gam=gam)
}

for (j in 1:R){
  EDD[j] <- Simu_SL[[j]]
}
mean(EDD)
